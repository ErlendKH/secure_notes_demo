
name: Android CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a job that runs the unit tests
  unit-tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run unit tests
        run: bash gradlew test

      # It takes files generated during the workflow
      # (here, your JUnit test results) and uploads them as artifacts to GitHub.
      # A downloadable file you can see in the Actions run page.
      # You can inspect the raw XML or HTML reports after the workflow completes.
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          # The display name of the artifact.
          name: junit-results
          # Path to the files you want to upload.
          path: app/build/test-results

      # Reads test result files (JUnit XML) and
      # shows a test summary directly in the GitHub Actions UI.
      - name: Publish test results
        uses: dorny/test-reporter@v1
        with:
          # The label for this test report in the UI.
          name: Unit Tests
          # Location of JUnit XML test results.
          path: app/build/test-results/testDebugUnitTest
          # Format of the test results â€” here junit.
          reporter: junit